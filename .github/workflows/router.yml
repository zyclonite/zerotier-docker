name: Router Mode build
on:
  workflow_call:
    inputs:
      event:
        required: true
        type: string
      tag:
        required: true
        type: string
    secrets:
      QUAY_PASSWORD:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

env:
  IMAGE_NAME: zerotier

jobs:
  build:
    name: Build images
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        platform: [
          {name: "linux/amd64", tag: "amd64"},
          {name: "linux/386", tag: "i386"},
          {name: "linux/arm64/v8", tag: "arm64v8"},
          {name: "linux/arm/v7", tag: "arm32v7"},
          {name: "linux/arm/v6", tag: "arm32v6"},
          {name: "linux/riscv64", tag: "riscv64"},
          {name: "linux/ppc64le", tag: "ppc64le"},
          {name: "linux/s390x", tag: "s390x"}
        ]
    steps:
      - name: Checkout zerotier-docker
        uses: actions/checkout@v4

      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Build unstable image
        if: ${{ inputs.event == 'push' || inputs.event == 'pull_request' }}
        run: buildah bud --platform ${{ matrix.platform.name }} --build-arg FROM_IMAGE=${{ format('ghcr.io/zyclonite/{0}', env.IMAGE_NAME) }} --build-arg FROM_VERSION=main -f ./Dockerfile.router -t ${{ env.IMAGE_NAME }}:${{ matrix.platform.tag }} .

      - name: Build stable image
        if: ${{ inputs.event == 'release' }}
        run: buildah bud --platform ${{ matrix.platform.name }} --build-arg FROM_IMAGE=${{ format('ghcr.io/zyclonite/{0}', env.IMAGE_NAME) }} --build-arg FROM_VERSION=${{ inputs.tag }} -f ./Dockerfile.router -t ${{ env.IMAGE_NAME }}:${{ matrix.platform.tag }} .

      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'

      - name: Check image metadata
        run: buildah inspect ${{ env.IMAGE_NAME }}:${{ matrix.platform.tag }} | jq ".OCIv1.architecture"

      - name: Export image
        run: podman save -o /tmp/image.tar ${{ env.IMAGE_NAME }}:${{ matrix.platform.tag }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.platform.tag }}-router
          path: /tmp/image.tar

  push:
    name: Publish images
    runs-on: ubuntu-24.04
    needs: build
    environment: production
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Import images
        run: |
          podman load -i ./image-amd64-router/image.tar
          podman load -i ./image-i386-router/image.tar
          podman load -i ./image-arm64v8-router/image.tar
          podman load -i ./image-arm32v7-router/image.tar
          podman load -i ./image-arm32v6-router/image.tar
          podman load -i ./image-riscv64-router/image.tar
          podman load -i ./image-ppc64le-router/image.tar
          podman load -i ./image-s390x-router/image.tar

      - name: Create multi-arch manifest
        run: |
          buildah manifest create ${{ env.IMAGE_NAME }}:latest
          buildah manifest add --arch amd64 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:amd64
          buildah manifest add --arch 386 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:i386
          buildah manifest add --arch arm64 --variant v8 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:arm64v8
          buildah manifest add --arch arm --variant v7 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:arm32v7
          buildah manifest add --arch arm --variant v6 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:arm32v6
          buildah manifest add --arch riscv64 ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:riscv64
          buildah manifest add --arch ppc64le ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:ppc64le
          buildah manifest add --arch s390x ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:s390x

      - name: Push unstable images
        if: ${{ inputs.event == 'push' || inputs.event == 'pull_request' }}
        run: |
          buildah manifest push --all --format v2s2 --creds zyclonite:${{ secrets.DOCKERHUB_PASSWORD }} ${{ env.IMAGE_NAME }}:latest docker://docker.io/zyclonite/${{ env.IMAGE_NAME }}:router-main
          buildah manifest push --all --creds zyclonite:${{ secrets.QUAY_PASSWORD }} ${{ env.IMAGE_NAME }}:latest docker://quay.io/zyclonite/${{ env.IMAGE_NAME }}:router-main
          buildah manifest push --all --creds zyclonite:${{ secrets.GITHUB_TOKEN }} ${{ env.IMAGE_NAME }}:latest docker://ghcr.io/zyclonite/${{ env.IMAGE_NAME }}:router-main

      - name: Push stable images
        if: ${{ inputs.event == 'release' }}
        run: |
          buildah manifest push --all --format v2s2 --creds zyclonite:${{ secrets.DOCKERHUB_PASSWORD }} ${{ env.IMAGE_NAME }}:latest docker://docker.io/zyclonite/${{ env.IMAGE_NAME }}:router
          buildah manifest push --all --format v2s2 --creds zyclonite:${{ secrets.DOCKERHUB_PASSWORD }} ${{ env.IMAGE_NAME }}:latest docker://docker.io/zyclonite/${{ env.IMAGE_NAME }}:router-${{ github.event.release.tag_name }}
          buildah manifest push --all --creds zyclonite:${{ secrets.QUAY_PASSWORD }} ${{ env.IMAGE_NAME }}:latest docker://quay.io/zyclonite/${{ env.IMAGE_NAME }}:router
          buildah manifest push --all --creds zyclonite:${{ secrets.QUAY_PASSWORD }} ${{ env.IMAGE_NAME }}:latest docker://quay.io/zyclonite/${{ env.IMAGE_NAME }}:router-${{ github.event.release.tag_name }}
          buildah manifest push --all --creds zyclonite:${{ secrets.GITHUB_TOKEN }} ${{ env.IMAGE_NAME }}:latest docker://ghcr.io/zyclonite/${{ env.IMAGE_NAME }}:router
          buildah manifest push --all --creds zyclonite:${{ secrets.GITHUB_TOKEN }} ${{ env.IMAGE_NAME }}:latest docker://ghcr.io/zyclonite/${{ env.IMAGE_NAME }}:router-${{ github.event.release.tag_name }}
